// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace chat.protocol.protobuf {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ChatProtobufs {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_chat_protocol_User__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::chat.protocol.protobuf.User, global::chat.protocol.protobuf.User.Builder> internal__static_chat_protocol_User__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_chat_protocol_Message__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::chat.protocol.protobuf.Message, global::chat.protocol.protobuf.Message.Builder> internal__static_chat_protocol_Message__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_chat_protocol_ChatRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::chat.protocol.protobuf.ChatRequest, global::chat.protocol.protobuf.ChatRequest.Builder> internal__static_chat_protocol_ChatRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_chat_protocol_ChatResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::chat.protocol.protobuf.ChatResponse, global::chat.protocol.protobuf.ChatResponse.Builder> internal__static_chat_protocol_ChatResponse__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ChatProtobufs() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChJDaGF0UHJvdG9jb2wucHJvdG8SDWNoYXQucHJvdG9jb2waJGdvb2dsZS9w" + 
          "cm90b2J1Zi9jc2hhcnBfb3B0aW9ucy5wcm90byIiCgRVc2VyEgoKAmlkGAEg" + 
          "AigJEg4KBnBhc3N3ZBgCIAEoCSI9CgdNZXNzYWdlEhIKCnJlY2VpdmVySWQY" + 
          "ASACKAkSEAoIc2VuZGVySWQYAiACKAkSDAoEdGV4dBgDIAIoCSLOAQoLQ2hh" + 
          "dFJlcXVlc3QSLQoEdHlwZRgBIAIoDjIfLmNoYXQucHJvdG9jb2wuQ2hhdFJl" + 
          "cXVlc3QuVHlwZRIhCgR1c2VyGAIgASgLMhMuY2hhdC5wcm90b2NvbC5Vc2Vy" + 
          "EicKB21lc3NhZ2UYAyABKAsyFi5jaGF0LnByb3RvY29sLk1lc3NhZ2UiRAoE" + 
          "VHlwZRIJCgVMb2dpbhABEgoKBkxvZ291dBACEg8KC1NlbmRNZXNzYWdlEAMS" + 
          "FAoQR2V0TG9nZ2VkRnJpZW5kcxAEIqkCCgxDaGF0UmVzcG9uc2USLgoEdHlw" + 
          "ZRgBIAIoDjIgLmNoYXQucHJvdG9jb2wuQ2hhdFJlc3BvbnNlLlR5cGUSDQoF" + 
          "ZXJyb3IYAiABKAkSJAoHZnJpZW5kcxgDIAMoCzITLmNoYXQucHJvdG9jb2wu" + 
          "VXNlchIhCgR1c2VyGAQgASgLMhMuY2hhdC5wcm90b2NvbC5Vc2VyEicKB21l" + 
          "c3NhZ2UYBSABKAsyFi5jaGF0LnByb3RvY29sLk1lc3NhZ2UiaAoEVHlwZRIG" + 
          "CgJPaxABEgkKBUVycm9yEAISFAoQR2V0TG9nZ2VkRnJpZW5kcxADEhIKDkZy" + 
          "aWVuZExvZ2dlZEluEAQSEwoPRnJpZW5kTG9nZ2VkT3V0EAUSDgoKTmV3TWVz" + 
          "c2FnZRAGQlEKFmNoYXQucHJvdG9jb2wucHJvdG9idWZCDUNoYXRQcm90b2J1" + 
          "ZnPCPicKFmNoYXQucHJvdG9jb2wucHJvdG9idWYSDUNoYXRQcm90b2J1ZnM=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_chat_protocol_User__Descriptor = Descriptor.MessageTypes[0];
        internal__static_chat_protocol_User__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::chat.protocol.protobuf.User, global::chat.protocol.protobuf.User.Builder>(internal__static_chat_protocol_User__Descriptor,
                new string[] { "Id", "Passwd", });
        internal__static_chat_protocol_Message__Descriptor = Descriptor.MessageTypes[1];
        internal__static_chat_protocol_Message__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::chat.protocol.protobuf.Message, global::chat.protocol.protobuf.Message.Builder>(internal__static_chat_protocol_Message__Descriptor,
                new string[] { "ReceiverId", "SenderId", "Text", });
        internal__static_chat_protocol_ChatRequest__Descriptor = Descriptor.MessageTypes[2];
        internal__static_chat_protocol_ChatRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::chat.protocol.protobuf.ChatRequest, global::chat.protocol.protobuf.ChatRequest.Builder>(internal__static_chat_protocol_ChatRequest__Descriptor,
                new string[] { "Type", "User", "Message", });
        internal__static_chat_protocol_ChatResponse__Descriptor = Descriptor.MessageTypes[3];
        internal__static_chat_protocol_ChatResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::chat.protocol.protobuf.ChatResponse, global::chat.protocol.protobuf.ChatResponse.Builder>(internal__static_chat_protocol_ChatResponse__Descriptor,
                new string[] { "Type", "Error", "Friends", "User", "Message", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class User : pb::GeneratedMessage<User, User.Builder> {
    private User() { }
    private static readonly User defaultInstance = new User().MakeReadOnly();
    private static readonly string[] _userFieldNames = new string[] { "id", "passwd" };
    private static readonly uint[] _userFieldTags = new uint[] { 10, 18 };
    public static User DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override User DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override User ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::chat.protocol.protobuf.ChatProtobufs.internal__static_chat_protocol_User__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<User, User.Builder> InternalFieldAccessors {
      get { return global::chat.protocol.protobuf.ChatProtobufs.internal__static_chat_protocol_User__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int PasswdFieldNumber = 2;
    private bool hasPasswd;
    private string passwd_ = "";
    public bool HasPasswd {
      get { return hasPasswd; }
    }
    public string Passwd {
      get { return passwd_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _userFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasPasswd) {
        output.WriteString(2, field_names[1], Passwd);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Id);
        }
        if (hasPasswd) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Passwd);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static User ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static User ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static User ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static User ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static User ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static User ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static User ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static User ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static User ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static User ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private User MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(User prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<User, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(User cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private User result;
      
      private User PrepareBuilder() {
        if (resultIsReadOnly) {
          User original = result;
          result = new User();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override User MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::chat.protocol.protobuf.User.Descriptor; }
      }
      
      public override User DefaultInstanceForType {
        get { return global::chat.protocol.protobuf.User.DefaultInstance; }
      }
      
      public override User BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is User) {
          return MergeFrom((User) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(User other) {
        if (other == global::chat.protocol.protobuf.User.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasPasswd) {
          Passwd = other.Passwd;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_userFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _userFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              result.hasPasswd = input.ReadString(ref result.passwd_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasPasswd {
        get { return result.hasPasswd; }
      }
      public string Passwd {
        get { return result.Passwd; }
        set { SetPasswd(value); }
      }
      public Builder SetPasswd(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPasswd = true;
        result.passwd_ = value;
        return this;
      }
      public Builder ClearPasswd() {
        PrepareBuilder();
        result.hasPasswd = false;
        result.passwd_ = "";
        return this;
      }
    }
    static User() {
      object.ReferenceEquals(global::chat.protocol.protobuf.ChatProtobufs.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Message : pb::GeneratedMessage<Message, Message.Builder> {
    private Message() { }
    private static readonly Message defaultInstance = new Message().MakeReadOnly();
    private static readonly string[] _messageFieldNames = new string[] { "receiverId", "senderId", "text" };
    private static readonly uint[] _messageFieldTags = new uint[] { 10, 18, 26 };
    public static Message DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Message DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Message ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::chat.protocol.protobuf.ChatProtobufs.internal__static_chat_protocol_Message__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Message, Message.Builder> InternalFieldAccessors {
      get { return global::chat.protocol.protobuf.ChatProtobufs.internal__static_chat_protocol_Message__FieldAccessorTable; }
    }
    
    public const int ReceiverIdFieldNumber = 1;
    private bool hasReceiverId;
    private string receiverId_ = "";
    public bool HasReceiverId {
      get { return hasReceiverId; }
    }
    public string ReceiverId {
      get { return receiverId_; }
    }
    
    public const int SenderIdFieldNumber = 2;
    private bool hasSenderId;
    private string senderId_ = "";
    public bool HasSenderId {
      get { return hasSenderId; }
    }
    public string SenderId {
      get { return senderId_; }
    }
    
    public const int TextFieldNumber = 3;
    private bool hasText;
    private string text_ = "";
    public bool HasText {
      get { return hasText; }
    }
    public string Text {
      get { return text_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReceiverId) return false;
        if (!hasSenderId) return false;
        if (!hasText) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _messageFieldNames;
      if (hasReceiverId) {
        output.WriteString(1, field_names[0], ReceiverId);
      }
      if (hasSenderId) {
        output.WriteString(2, field_names[1], SenderId);
      }
      if (hasText) {
        output.WriteString(3, field_names[2], Text);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasReceiverId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ReceiverId);
        }
        if (hasSenderId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, SenderId);
        }
        if (hasText) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Text);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Message ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Message ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Message ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Message ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Message ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Message ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Message ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Message ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Message ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Message ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Message MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Message prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Message, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Message cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Message result;
      
      private Message PrepareBuilder() {
        if (resultIsReadOnly) {
          Message original = result;
          result = new Message();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Message MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::chat.protocol.protobuf.Message.Descriptor; }
      }
      
      public override Message DefaultInstanceForType {
        get { return global::chat.protocol.protobuf.Message.DefaultInstance; }
      }
      
      public override Message BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Message) {
          return MergeFrom((Message) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Message other) {
        if (other == global::chat.protocol.protobuf.Message.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReceiverId) {
          ReceiverId = other.ReceiverId;
        }
        if (other.HasSenderId) {
          SenderId = other.SenderId;
        }
        if (other.HasText) {
          Text = other.Text;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_messageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _messageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasReceiverId = input.ReadString(ref result.receiverId_);
              break;
            }
            case 18: {
              result.hasSenderId = input.ReadString(ref result.senderId_);
              break;
            }
            case 26: {
              result.hasText = input.ReadString(ref result.text_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasReceiverId {
        get { return result.hasReceiverId; }
      }
      public string ReceiverId {
        get { return result.ReceiverId; }
        set { SetReceiverId(value); }
      }
      public Builder SetReceiverId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReceiverId = true;
        result.receiverId_ = value;
        return this;
      }
      public Builder ClearReceiverId() {
        PrepareBuilder();
        result.hasReceiverId = false;
        result.receiverId_ = "";
        return this;
      }
      
      public bool HasSenderId {
        get { return result.hasSenderId; }
      }
      public string SenderId {
        get { return result.SenderId; }
        set { SetSenderId(value); }
      }
      public Builder SetSenderId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSenderId = true;
        result.senderId_ = value;
        return this;
      }
      public Builder ClearSenderId() {
        PrepareBuilder();
        result.hasSenderId = false;
        result.senderId_ = "";
        return this;
      }
      
      public bool HasText {
        get { return result.hasText; }
      }
      public string Text {
        get { return result.Text; }
        set { SetText(value); }
      }
      public Builder SetText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasText = true;
        result.text_ = value;
        return this;
      }
      public Builder ClearText() {
        PrepareBuilder();
        result.hasText = false;
        result.text_ = "";
        return this;
      }
    }
    static Message() {
      object.ReferenceEquals(global::chat.protocol.protobuf.ChatProtobufs.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ChatRequest : pb::GeneratedMessage<ChatRequest, ChatRequest.Builder> {
    private ChatRequest() { }
    private static readonly ChatRequest defaultInstance = new ChatRequest().MakeReadOnly();
    private static readonly string[] _chatRequestFieldNames = new string[] { "message", "type", "user" };
    private static readonly uint[] _chatRequestFieldTags = new uint[] { 26, 8, 18 };
    public static ChatRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChatRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChatRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::chat.protocol.protobuf.ChatProtobufs.internal__static_chat_protocol_ChatRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChatRequest, ChatRequest.Builder> InternalFieldAccessors {
      get { return global::chat.protocol.protobuf.ChatProtobufs.internal__static_chat_protocol_ChatRequest__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Type {
        Login = 1,
        Logout = 2,
        SendMessage = 3,
        GetLoggedFriends = 4,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::chat.protocol.protobuf.ChatRequest.Types.Type type_ = global::chat.protocol.protobuf.ChatRequest.Types.Type.Login;
    public bool HasType {
      get { return hasType; }
    }
    public global::chat.protocol.protobuf.ChatRequest.Types.Type Type {
      get { return type_; }
    }
    
    public const int UserFieldNumber = 2;
    private bool hasUser;
    private global::chat.protocol.protobuf.User user_;
    public bool HasUser {
      get { return hasUser; }
    }
    public global::chat.protocol.protobuf.User User {
      get { return user_ ?? global::chat.protocol.protobuf.User.DefaultInstance; }
    }
    
    public const int MessageFieldNumber = 3;
    private bool hasMessage;
    private global::chat.protocol.protobuf.Message message_;
    public bool HasMessage {
      get { return hasMessage; }
    }
    public global::chat.protocol.protobuf.Message Message {
      get { return message_ ?? global::chat.protocol.protobuf.Message.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (HasUser) {
          if (!User.IsInitialized) return false;
        }
        if (HasMessage) {
          if (!Message.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _chatRequestFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[1], (int) Type, Type);
      }
      if (hasUser) {
        output.WriteMessage(2, field_names[2], User);
      }
      if (hasMessage) {
        output.WriteMessage(3, field_names[0], Message);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (hasUser) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, User);
        }
        if (hasMessage) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Message);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ChatRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChatRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChatRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChatRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChatRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChatRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChatRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChatRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChatRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChatRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChatRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChatRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ChatRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChatRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChatRequest result;
      
      private ChatRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ChatRequest original = result;
          result = new ChatRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChatRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::chat.protocol.protobuf.ChatRequest.Descriptor; }
      }
      
      public override ChatRequest DefaultInstanceForType {
        get { return global::chat.protocol.protobuf.ChatRequest.DefaultInstance; }
      }
      
      public override ChatRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChatRequest) {
          return MergeFrom((ChatRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChatRequest other) {
        if (other == global::chat.protocol.protobuf.ChatRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasUser) {
          MergeUser(other.User);
        }
        if (other.HasMessage) {
          MergeMessage(other.Message);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_chatRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _chatRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::chat.protocol.protobuf.User.Builder subBuilder = global::chat.protocol.protobuf.User.CreateBuilder();
              if (result.hasUser) {
                subBuilder.MergeFrom(User);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              User = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::chat.protocol.protobuf.Message.Builder subBuilder = global::chat.protocol.protobuf.Message.CreateBuilder();
              if (result.hasMessage) {
                subBuilder.MergeFrom(Message);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Message = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::chat.protocol.protobuf.ChatRequest.Types.Type Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::chat.protocol.protobuf.ChatRequest.Types.Type value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::chat.protocol.protobuf.ChatRequest.Types.Type.Login;
        return this;
      }
      
      public bool HasUser {
       get { return result.hasUser; }
      }
      public global::chat.protocol.protobuf.User User {
        get { return result.User; }
        set { SetUser(value); }
      }
      public Builder SetUser(global::chat.protocol.protobuf.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUser = true;
        result.user_ = value;
        return this;
      }
      public Builder SetUser(global::chat.protocol.protobuf.User.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUser = true;
        result.user_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUser(global::chat.protocol.protobuf.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUser &&
            result.user_ != global::chat.protocol.protobuf.User.DefaultInstance) {
            result.user_ = global::chat.protocol.protobuf.User.CreateBuilder(result.user_).MergeFrom(value).BuildPartial();
        } else {
          result.user_ = value;
        }
        result.hasUser = true;
        return this;
      }
      public Builder ClearUser() {
        PrepareBuilder();
        result.hasUser = false;
        result.user_ = null;
        return this;
      }
      
      public bool HasMessage {
       get { return result.hasMessage; }
      }
      public global::chat.protocol.protobuf.Message Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(global::chat.protocol.protobuf.Message value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder SetMessage(global::chat.protocol.protobuf.Message.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMessage(global::chat.protocol.protobuf.Message value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMessage &&
            result.message_ != global::chat.protocol.protobuf.Message.DefaultInstance) {
            result.message_ = global::chat.protocol.protobuf.Message.CreateBuilder(result.message_).MergeFrom(value).BuildPartial();
        } else {
          result.message_ = value;
        }
        result.hasMessage = true;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = null;
        return this;
      }
    }
    static ChatRequest() {
      object.ReferenceEquals(global::chat.protocol.protobuf.ChatProtobufs.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ChatResponse : pb::GeneratedMessage<ChatResponse, ChatResponse.Builder> {
    private ChatResponse() { }
    private static readonly ChatResponse defaultInstance = new ChatResponse().MakeReadOnly();
    private static readonly string[] _chatResponseFieldNames = new string[] { "error", "friends", "message", "type", "user" };
    private static readonly uint[] _chatResponseFieldTags = new uint[] { 18, 26, 42, 8, 34 };
    public static ChatResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChatResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChatResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::chat.protocol.protobuf.ChatProtobufs.internal__static_chat_protocol_ChatResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChatResponse, ChatResponse.Builder> InternalFieldAccessors {
      get { return global::chat.protocol.protobuf.ChatProtobufs.internal__static_chat_protocol_ChatResponse__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Type {
        Ok = 1,
        Error = 2,
        GetLoggedFriends = 3,
        FriendLoggedIn = 4,
        FriendLoggedOut = 5,
        NewMessage = 6,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::chat.protocol.protobuf.ChatResponse.Types.Type type_ = global::chat.protocol.protobuf.ChatResponse.Types.Type.Ok;
    public bool HasType {
      get { return hasType; }
    }
    public global::chat.protocol.protobuf.ChatResponse.Types.Type Type {
      get { return type_; }
    }
    
    public const int ErrorFieldNumber = 2;
    private bool hasError;
    private string error_ = "";
    public bool HasError {
      get { return hasError; }
    }
    public string Error {
      get { return error_; }
    }
    
    public const int FriendsFieldNumber = 3;
    private pbc::PopsicleList<global::chat.protocol.protobuf.User> friends_ = new pbc::PopsicleList<global::chat.protocol.protobuf.User>();
    public scg::IList<global::chat.protocol.protobuf.User> FriendsList {
      get { return friends_; }
    }
    public int FriendsCount {
      get { return friends_.Count; }
    }
    public global::chat.protocol.protobuf.User GetFriends(int index) {
      return friends_[index];
    }
    
    public const int UserFieldNumber = 4;
    private bool hasUser;
    private global::chat.protocol.protobuf.User user_;
    public bool HasUser {
      get { return hasUser; }
    }
    public global::chat.protocol.protobuf.User User {
      get { return user_ ?? global::chat.protocol.protobuf.User.DefaultInstance; }
    }
    
    public const int MessageFieldNumber = 5;
    private bool hasMessage;
    private global::chat.protocol.protobuf.Message message_;
    public bool HasMessage {
      get { return hasMessage; }
    }
    public global::chat.protocol.protobuf.Message Message {
      get { return message_ ?? global::chat.protocol.protobuf.Message.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        foreach (global::chat.protocol.protobuf.User element in FriendsList) {
          if (!element.IsInitialized) return false;
        }
        if (HasUser) {
          if (!User.IsInitialized) return false;
        }
        if (HasMessage) {
          if (!Message.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _chatResponseFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[3], (int) Type, Type);
      }
      if (hasError) {
        output.WriteString(2, field_names[0], Error);
      }
      if (friends_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], friends_);
      }
      if (hasUser) {
        output.WriteMessage(4, field_names[4], User);
      }
      if (hasMessage) {
        output.WriteMessage(5, field_names[2], Message);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (hasError) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Error);
        }
        foreach (global::chat.protocol.protobuf.User element in FriendsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (hasUser) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, User);
        }
        if (hasMessage) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Message);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ChatResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChatResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChatResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChatResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChatResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChatResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChatResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChatResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChatResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChatResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChatResponse MakeReadOnly() {
      friends_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChatResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ChatResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChatResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChatResponse result;
      
      private ChatResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ChatResponse original = result;
          result = new ChatResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChatResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::chat.protocol.protobuf.ChatResponse.Descriptor; }
      }
      
      public override ChatResponse DefaultInstanceForType {
        get { return global::chat.protocol.protobuf.ChatResponse.DefaultInstance; }
      }
      
      public override ChatResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChatResponse) {
          return MergeFrom((ChatResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChatResponse other) {
        if (other == global::chat.protocol.protobuf.ChatResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasError) {
          Error = other.Error;
        }
        if (other.friends_.Count != 0) {
          result.friends_.Add(other.friends_);
        }
        if (other.HasUser) {
          MergeUser(other.User);
        }
        if (other.HasMessage) {
          MergeMessage(other.Message);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_chatResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _chatResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasError = input.ReadString(ref result.error_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.friends_, global::chat.protocol.protobuf.User.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              global::chat.protocol.protobuf.User.Builder subBuilder = global::chat.protocol.protobuf.User.CreateBuilder();
              if (result.hasUser) {
                subBuilder.MergeFrom(User);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              User = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::chat.protocol.protobuf.Message.Builder subBuilder = global::chat.protocol.protobuf.Message.CreateBuilder();
              if (result.hasMessage) {
                subBuilder.MergeFrom(Message);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Message = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::chat.protocol.protobuf.ChatResponse.Types.Type Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::chat.protocol.protobuf.ChatResponse.Types.Type value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::chat.protocol.protobuf.ChatResponse.Types.Type.Ok;
        return this;
      }
      
      public bool HasError {
        get { return result.hasError; }
      }
      public string Error {
        get { return result.Error; }
        set { SetError(value); }
      }
      public Builder SetError(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasError = true;
        result.error_ = value;
        return this;
      }
      public Builder ClearError() {
        PrepareBuilder();
        result.hasError = false;
        result.error_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::chat.protocol.protobuf.User> FriendsList {
        get { return PrepareBuilder().friends_; }
      }
      public int FriendsCount {
        get { return result.FriendsCount; }
      }
      public global::chat.protocol.protobuf.User GetFriends(int index) {
        return result.GetFriends(index);
      }
      public Builder SetFriends(int index, global::chat.protocol.protobuf.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.friends_[index] = value;
        return this;
      }
      public Builder SetFriends(int index, global::chat.protocol.protobuf.User.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.friends_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFriends(global::chat.protocol.protobuf.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.friends_.Add(value);
        return this;
      }
      public Builder AddFriends(global::chat.protocol.protobuf.User.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.friends_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFriends(scg::IEnumerable<global::chat.protocol.protobuf.User> values) {
        PrepareBuilder();
        result.friends_.Add(values);
        return this;
      }
      public Builder ClearFriends() {
        PrepareBuilder();
        result.friends_.Clear();
        return this;
      }
      
      public bool HasUser {
       get { return result.hasUser; }
      }
      public global::chat.protocol.protobuf.User User {
        get { return result.User; }
        set { SetUser(value); }
      }
      public Builder SetUser(global::chat.protocol.protobuf.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUser = true;
        result.user_ = value;
        return this;
      }
      public Builder SetUser(global::chat.protocol.protobuf.User.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUser = true;
        result.user_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUser(global::chat.protocol.protobuf.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUser &&
            result.user_ != global::chat.protocol.protobuf.User.DefaultInstance) {
            result.user_ = global::chat.protocol.protobuf.User.CreateBuilder(result.user_).MergeFrom(value).BuildPartial();
        } else {
          result.user_ = value;
        }
        result.hasUser = true;
        return this;
      }
      public Builder ClearUser() {
        PrepareBuilder();
        result.hasUser = false;
        result.user_ = null;
        return this;
      }
      
      public bool HasMessage {
       get { return result.hasMessage; }
      }
      public global::chat.protocol.protobuf.Message Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(global::chat.protocol.protobuf.Message value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder SetMessage(global::chat.protocol.protobuf.Message.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMessage(global::chat.protocol.protobuf.Message value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMessage &&
            result.message_ != global::chat.protocol.protobuf.Message.DefaultInstance) {
            result.message_ = global::chat.protocol.protobuf.Message.CreateBuilder(result.message_).MergeFrom(value).BuildPartial();
        } else {
          result.message_ = value;
        }
        result.hasMessage = true;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = null;
        return this;
      }
    }
    static ChatResponse() {
      object.ReferenceEquals(global::chat.protocol.protobuf.ChatProtobufs.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
