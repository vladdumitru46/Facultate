Lab 6 -> Translator -> Generare cod asm din cod sursa
Putem alege ce limbaj vrem
void main() {
	int  a;
scanf("%d", &a);
if(a < 0){
printf("%d", a);
}
}

<program> -> "void main () {"
		< instructiuni>
	     "}"
<instructiuni> -> <instr>";" | <instr>";" <instructiuni> (explicatii pentru <instructiuni>, | - sau) 
<instr> -> <instr_attr> | <instr_IO> | <instr_cond> | <instr_cicl> | <decl> (decl - declarare)
<decl> -> <tip de data><list_var>
<tip_data> ->

int a,b,c; => vrem ca specificarea sa fie generala, dar pentru cazul asta de ex: a,b=5,c, nu neaparat
<tip_data> -> "int" | "chr" | <tip_user>
<tip_user> -> "struct ..." | "int" "[" <const_nr> "]" 
<list_var> -> <var> | <var> "," <list_var> | <var_init> | <var_init> "," <list_var>
<var> -> [a-z]{1,8}
<var_init> -> <var>"="<expr>
<expr> -> <term> | <term><op_aritm><expr>
<op_aritm> -> "+" "-" "*" ","
<term> -> <var> | <const_nr>
<const_nr> -> regex pe care il luam din documentatie
<instr_cond> -> <simple_if> | <if_else>
<simple_if> -> "if" "(" <list_cond> ")" "{"
		<instructiuni>
	           "}" 
<if_else> -> <simple_if>" "else" "{" <instructiuni> "}"
<list_cond> -> <cond> | <cond> <op_logic> <list_cond> | e (e - epsilon vine de la empty) -> nu punem e aici
<op_logic> "&&" "|" "^"
<cond> -> <expr> <op_relationali> <expr> | <expr>
<op_relationali> "<" ">" "==" "!=" ...
Ne bazam pe elementele de sintaxa ale unui limbaj existent (mai ok C++ sau python cred =)) )
Nu tre' sa specificam include <iostream> de ex sau import din java etc.
